generator client {
  provider = "prisma-client-js"
  output   = "../../../.prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String          @id @default(cuid())
  name          String
  email         String
  emailVerified Boolean
  image         String?
  createdAt     DateTime
  updatedAt     DateTime
  sessions      Session[]
  accounts      Account[]
  decks         Deck[]
  preferences   UserPreference?
  sessionLogs   SessionLog[]

  @@unique([email])
  @@map("users")
}

model Session {
  id        String   @id
  expiresAt DateTime
  token     String
  createdAt DateTime
  updatedAt DateTime
  ipAddress String?
  userAgent String?
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([token])
  @@map("session")
}

model Account {
  id                    String    @id
  accountId             String
  providerId            String
  userId                String
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime
  updatedAt             DateTime

  @@map("account")
}

model Verification {
  id         String    @id
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime?
  updatedAt  DateTime?

  @@map("verification")
}

model UserPreference {
  id     String @id @default(cuid())
  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId])
  @@map("user_preferences")
}

model Deck {
  id          String   @id @default(cuid())
  authorId    String
  author      User     @relation(fields: [authorId], references: [id], onDelete: Cascade)
  title       String   @default("untitled")
  cards       Card[]
  tags        String[]
  description String   @default("") @db.VarChar(255)

  @@map("decks")
}

model Card {
  id            String     @id @default(cuid())
  deckId        String
  deck          Deck       @relation(fields: [deckId], references: [id], onDelete: Cascade)
  front         String
  back          String
  audioUrl      String
  level         Int        @default(1)
  done          Boolean    @default(false)
  reviewedDates DateTime[]
  nextReview    DateTime   @default(now())

  @@map("cards")
}

model SessionLog {
  id     String   @id @default(cuid())
  userId String
  user   User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  date   DateTime // Need to normalize date before pushing to db in order to properly enforce uniqueness
  goal   Int      @default(50)

  @@unique([userId, date])
  @@map("session_logs")
}
